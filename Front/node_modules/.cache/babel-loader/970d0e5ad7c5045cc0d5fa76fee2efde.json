{"ast":null,"code":"var _jsxFileName = \"/home/chloe/Workspace/React-SpringBoot/Workspace/React/test-react2/src/component/chat/PrivateMessageBox/PrivateMessageBox.jsx\";\nimport React, { Component } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport Footer from '../footer/Footer';\nimport userImage from '../../../userImage.png';\nvar stompClient = null;\n\nclass PrivateMessageBox extends Component {\n  constructor(props) {\n    super(props);\n\n    this.connect = () => {\n      if (this.props.otherUser) {\n        const Stomp = require('stompjs');\n\n        var SockJS = require('sockjs-client');\n\n        SockJS = new SockJS('/ws');\n        stompClient = Stomp.over(SockJS);\n        stompClient.connect({}, this.onConnected, this.onError);\n      }\n    };\n\n    this.onConnected = () => {\n      // Subscribing to the private topic\n      stompClient.subscribe('/user/' + this.props.otherUser.toString().toLowerCase() + '/reply', this.onMessageReceived); // Registering user to server as a private chat user\n\n      stompClient.send('/app/addPrivateUser', {}, JSON.stringify({\n        sender: this.props.otherUser,\n        type: 'JOIN'\n      }));\n      this.setState({\n        showFooter: true\n      });\n    };\n\n    this.sendMessage = (type, value) => {\n      if (stompClient) {\n        var chatMessage = {\n          sender: this.props.youser,\n          receiver: this.props.otherUser,\n          content: type === 'TYPING' ? value : value,\n          type: type\n        };\n        stompClient.send('/app/sendPrivateMessage', {}, JSON.stringify(chatMessage));\n      }\n    };\n\n    this.onMessageReceived = payload => {\n      var message = JSON.parse(payload.body);\n\n      if (message.type === 'CHAT') {\n        this.state.broadcastMessage.push({\n          message: message.content,\n          sender: message.sender,\n          dateTime: message.dateTime\n        });\n        this.setState({\n          broadcastMessage: this.state.broadcastMessage\n        });\n      }\n    };\n\n    this.connect();\n    this.state = {\n      open: this.props.open,\n      broadcastMessage: [],\n      openMessageBox: false,\n      showFooter: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Dialog, {\n      open: this.props.open,\n      onClose: this.props.handleClose,\n      \"aria-labelledby\": \"responsive-dialog-title\",\n      onEscapeKeyDown: this.props.handleClose,\n      autoScrollBodyContent: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(DialogTitle, {\n      id: \"responsive-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Send Private Message\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \" \", React.createElement(\"img\", {\n      src: userImage,\n      alt: \"Default-User\",\n      id: \"userImage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"usernameDialogNotifications\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.props.otherUser)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Sent messages by You to \", this.props.otherUser)), this.state.broadcastMessage.map((msg, i) => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, this.props.youser === msg.sender ? msg.message : \"\"))))), this.state.showFooter ? React.createElement(Footer, {\n      sendMessage: this.sendMessage,\n      privateMessage: true,\n      connect: this.connect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }) : \"Connecting to \" + this.props.otherUser + \"...\", React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.props.handleClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Close\"))));\n  }\n\n}\n\nexport default PrivateMessageBox;","map":{"version":3,"sources":["/home/chloe/Workspace/React-SpringBoot/Workspace/React/test-react2/src/component/chat/PrivateMessageBox/PrivateMessageBox.jsx"],"names":["React","Component","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Button","Footer","userImage","stompClient","PrivateMessageBox","constructor","props","connect","otherUser","Stomp","require","SockJS","over","onConnected","onError","subscribe","toString","toLowerCase","onMessageReceived","send","JSON","stringify","sender","type","setState","showFooter","sendMessage","value","chatMessage","youser","receiver","content","payload","message","parse","body","state","broadcastMessage","push","dateTime","open","openMessageBox","render","handleClose","map","msg","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport Footer from '../footer/Footer'\nimport userImage from '../../../userImage.png';\n\nvar stompClient = null;\nclass PrivateMessageBox extends Component {\n\n  constructor(props) {\n    super(props);\n    this.connect()\n    this.state = {\n      open: this.props.open,\n      broadcastMessage: [],\n      openMessageBox: false,\n      showFooter: false\n    };\n  };\n\n  connect = () => {\n\n    if (this.props.otherUser) {\n\n      const Stomp = require('stompjs')\n\n      var SockJS = require('sockjs-client')\n\n      SockJS = new SockJS('/ws')\n\n      stompClient = Stomp.over(SockJS);\n\n      stompClient.connect({}, this.onConnected, this.onError);\n\n    }\n  }\n\n  onConnected = () => {\n\n    // Subscribing to the private topic\n    stompClient.subscribe('/user/' + this.props.otherUser.toString().toLowerCase() + '/reply', this.onMessageReceived);\n\n    // Registering user to server as a private chat user\n    stompClient.send('/app/addPrivateUser', {}, JSON.stringify({ sender: this.props.otherUser, type: 'JOIN' }))\n\n    this.setState({\n      showFooter: true,\n    })\n\n  }\n\n  sendMessage = (type, value) => {\n\n    if (stompClient) {\n      var chatMessage = {\n        sender: this.props.youser,\n        receiver: this.props.otherUser,\n        content: type === 'TYPING' ? value : value,\n        type: type\n\n      };\n      stompClient.send('/app/sendPrivateMessage', {}, JSON.stringify(chatMessage));\n\n    }\n  }\n\n  onMessageReceived = (payload) => {\n    var message = JSON.parse(payload.body);\n    if (message.type === 'CHAT') {\n      this.state.broadcastMessage.push({\n        message: message.content,\n        sender: message.sender,\n        dateTime: message.dateTime\n      })\n      this.setState({\n        broadcastMessage: this.state.broadcastMessage,\n      })\n    }\n  }\n\n  render() {\n\n    return <div>\n\n      <Dialog\n        open={this.props.open}\n        onClose={this.props.handleClose}\n        aria-labelledby=\"responsive-dialog-title\"\n        onEscapeKeyDown={this.props.handleClose}\n        autoScrollBodyContent={true}\n\n      >\n        <DialogTitle id=\"responsive-dialog-title\">{\"Send Private Message\"}\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            <div> <img src={userImage} alt=\"Default-User\" id=\"userImage\" /></div>\n            <div id=\"usernameDialogNotifications\">\n              <h5>{this.props.otherUser}</h5>\n            </div>\n            <div>\n              <div><h5>Sent messages by You to {this.props.otherUser}</h5></div>\n              {this.state.broadcastMessage.map((msg, i) =>\n                <div>{this.props.youser === msg.sender ? msg.message : \"\"}</div>\n\n              )}\n\n            </div>\n          </DialogContentText>\n        </DialogContent>\n\n       \n        {this.state.showFooter ? <Footer sendMessage={this.sendMessage} privateMessage={true} connect={this.connect} /> : \"Connecting to \" + this.props.otherUser + \"...\"}\n        <DialogActions>\n          <Button onClick={this.props.handleClose} color=\"primary\">\n            Close\n                 </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  }\n}\n\nexport default PrivateMessageBox;\n"]},"metadata":{},"sourceType":"module"}