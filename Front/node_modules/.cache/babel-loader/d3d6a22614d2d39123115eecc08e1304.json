{"ast":null,"code":"var _jsxFileName = \"/home/chloe/Workspace/React-SpringBoot/Workspace/React/test-react2/src/component/chat/ChatMessageBox/ChatMessageBox.jsx\";\nimport Paper from \"@material-ui/core/Paper\";\nimport React, { Component } from \"react\";\nimport Aside from \"../aside/Aside\";\nimport Footer from \"../footer/Footer\";\nimport Login from \"../login/Login\";\nimport Menu from \"../menu-app-bar/MenuAppBar\"; // Default user image\n\nimport userImage from \"../../../userImage.png\";\nimport \"./ChatMessageBox.scss\";\nvar stompClient = null;\n\nclass ChatMessageBox extends Component {\n  constructor(props) {\n    super(props);\n\n    this.connect = userName => {\n      if (userName) {\n        const Stomp = require(\"stompjs\");\n\n        var SockJS = require(\"sockjs-client\");\n\n        SockJS = new SockJS(\"/ws\");\n        stompClient = Stomp.over(SockJS);\n        stompClient.connect({}, this.onConnected, this.onError); //header, connectCallback, errorCallback      \n\n        this.setState({\n          username: userName\n        });\n      }\n    };\n\n    this.onConnected = () => {\n      this.setState({\n        channelConnected: true\n      }); // Subscribing to the public topic\n\n      stompClient.subscribe(\"/topic/pubic\", this.onMessageReceived); // Registering user to server as a public chat user\n\n      stompClient.send(\"/app/addUser\", {}, JSON.stringify({\n        sender: this.state.username,\n        type: \"JOIN\"\n      }));\n    };\n\n    this.sendMessage = (type, value) => {\n      if (stompClient) {\n        var chatMessage = {\n          sender: this.state.username,\n          content: type === \"TYPING\" ? value : value,\n          type: type\n        }; // send public message\n\n        stompClient.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\n      }\n    };\n\n    this.onMessageReceived = payload => {\n      var message = JSON.parse(payload.body);\n\n      if (message.type === \"JOIN\") {\n        this.state.roomNotification.push({\n          sender: message.sender + \" 님이 로그인 하셨습니다.\",\n          status: \"online\",\n          dateTime: message.dateTime\n        });\n        this.setState({\n          roomNotification: this.state.roomNotification,\n          bellRing: true\n        });\n      } else if (message.type === \"LEAVE\") {\n        this.state.roomNotification.map((notification, i) => {\n          if (notification.sender === message.sender + \" 님이 로그인 하셨습니다.\") {\n            notification.status = \"offline\";\n            notification.sender = message.sender + \" 님이 로그아웃 하셨습니다.\";\n            notification.dateTime = message.dateTime;\n          }\n        });\n        this.setState({\n          roomNotification: this.state.roomNotification,\n          bellRing: true\n        });\n      } else if (message.type === \"TYPING\") {\n        this.state.roomNotification.map((notification, i) => {\n          if (notification.sender === message.sender + \" 님이 로그인 하셨습니다.\") {\n            if (message.content) notification.status = \"typing...\";else notification.status = \"online\";\n          }\n        });\n        this.setState({\n          roomNotification: this.state.roomNotification\n        });\n      } else if (message.type === \"CHAT\") {\n        this.state.roomNotification.map((notification, i) => {\n          if (notification.sender === message.sender + \" 님이 로그인 하셨습니다.\") {\n            notification.status = \"online\";\n          }\n        });\n        this.state.broadcastMessage.push({\n          message: message.content,\n          sender: message.sender,\n          dateTime: message.dateTime\n        });\n        this.setState({\n          broadcastMessage: this.state.broadcastMessage\n        });\n      } else {// do nothing...\n      }\n    };\n\n    this.onError = error => {\n      this.setState({\n        error: \"Could not connect you to the Chat Room Server. Please refresh this page and try again!\"\n      });\n    };\n\n    this.scrollToBottom = () => {\n      var object = this.refs.messageBox;\n      if (object) object.scrollTop = object.scrollHeight;\n    };\n\n    this.state = {\n      username: \"\",\n      // -> login 에서 받아오기\n      channelConnected: false,\n      chatMessage: \"\",\n      roomNotification: [],\n      broadcastMessage: [],\n      error: \"\",\n      bottom: false,\n      curTime: \"\",\n      // -> current time\n      openNotifications: false,\n      bellRing: false\n    };\n  }\n\n  componentDidUpdate() {\n    if (this.state.error) {\n      throw new Error(\"Unable to connect to chat room server.\");\n    } else {\n      this.scrollToBottom();\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      curTime: new Date().toLocaleString()\n    });\n    this.timerID = setInterval(() => this.state.bellRing ? this.setState({\n      bellRing: false\n    }) : \"\", 1000);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, this.state.channelConnected ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(Menu, {\n      roomNotification: this.state.roomNotification,\n      bellRing: this.state.bellRing,\n      openNotifications: this.state.openNotifications,\n      username: this.state.username,\n      broadcastMessage: this.state.broadcastMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(Paper, {\n      elevation: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(Aside, {\n      roomNotification: this.state.roomNotification,\n      openNotifications: this.state.openNotifications,\n      username: this.state.username,\n      broadcastMessage: this.state.broadcastMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    })), React.createElement(Paper, {\n      elevation: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      id: \"chat\",\n      ref: \"messageBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, this.state.broadcastMessage.map((msg, i) => this.state.username === msg.sender ? React.createElement(\"li\", {\n      className: \"you\",\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"entity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: userImage,\n      alt: \"Default-User\",\n      className: \"avatar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \" \"), React.createElement(\"span\", {\n      className: \"sender\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \" \", msg.sender, \" ~ (You)\")), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \" \")), React.createElement(\"div\", {\n      className: \"triangle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, msg.message), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, msg.dateTime))) : React.createElement(\"li\", {\n      className: \"others\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"entity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \" \"), React.createElement(\"img\", {\n      src: userImage,\n      alt: \"Default-User\",\n      className: \"avatar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \" \"), React.createElement(\"span\", {\n      className: \"sender\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, msg.sender)), React.createElement(\"div\", {\n      className: \"triangle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, msg.message), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, msg.dateTime))))), React.createElement(Footer, {\n      sendMessage: this.sendMessage,\n      privateMessage: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }))) :\n    /* 접속중 아니면 로그인창 이동 */\n    React.createElement(Login, {\n      connect: this.connect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ChatMessageBox;","map":{"version":3,"sources":["/home/chloe/Workspace/React-SpringBoot/Workspace/React/test-react2/src/component/chat/ChatMessageBox/ChatMessageBox.jsx"],"names":["Paper","React","Component","Aside","Footer","Login","Menu","userImage","stompClient","ChatMessageBox","constructor","props","connect","userName","Stomp","require","SockJS","over","onConnected","onError","setState","username","channelConnected","subscribe","onMessageReceived","send","JSON","stringify","sender","state","type","sendMessage","value","chatMessage","content","payload","message","parse","body","roomNotification","push","status","dateTime","bellRing","map","notification","i","broadcastMessage","error","scrollToBottom","object","refs","messageBox","scrollTop","scrollHeight","bottom","curTime","openNotifications","componentDidUpdate","Error","componentDidMount","Date","toLocaleString","timerID","setInterval","render","msg"],"mappings":"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","sourcesContent":["import Paper from \"@material-ui/core/Paper\";\nimport React, { Component } from \"react\";\nimport Aside from \"../aside/Aside\";\nimport Footer from \"../footer/Footer\";\nimport Login from \"../login/Login\";\nimport Menu from \"../menu-app-bar/MenuAppBar\";\n// Default user image\nimport userImage from \"../../../userImage.png\";\nimport \"./ChatMessageBox.scss\";\n\n\n\nvar stompClient = null;\nclass ChatMessageBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\", // -> login 에서 받아오기\n      channelConnected: false, \n      chatMessage: \"\",\n      roomNotification: [],\n      broadcastMessage: [],\n      error: \"\",\n      bottom: false,\n      curTime: \"\", // -> current time\n      openNotifications: false,\n      bellRing: false\n    };\n  }\n\n  connect = userName => {\n    if (userName) {\n      const Stomp = require(\"stompjs\");\n\n      var SockJS = require(\"sockjs-client\");\n\n      SockJS = new SockJS(\"/ws\");\n\n      stompClient = Stomp.over(SockJS);\n\n      stompClient.connect({}, this.onConnected, this.onError);\n                      //header, connectCallback, errorCallback      \n      this.setState({\n        username: userName\n      });\n    }\n  };\n\n  onConnected = () => {\n    this.setState({\n      channelConnected: true\n    });\n\n    // Subscribing to the public topic\n    stompClient.subscribe(\"/topic/pubic\", this.onMessageReceived);\n\n    // Registering user to server as a public chat user\n    stompClient.send(\n      \"/app/addUser\",\n      {},\n      JSON.stringify({ sender: this.state.username, type: \"JOIN\" })\n    );\n  };\n\n  sendMessage = (type, value) => {\n    if (stompClient) {\n      var chatMessage = {\n        sender: this.state.username,\n        content: type === \"TYPING\" ? value : value,\n        type: type\n      };\n      // send public message\n      stompClient.send(\"/app/sendMessage\", {}, JSON.stringify(chatMessage));\n    }\n  };\n\n  //메세지 수신 시 \n  onMessageReceived = payload => {\n    var message = JSON.parse(payload.body);\n\n    if (message.type === \"JOIN\") {\n      this.state.roomNotification.push({\n        sender: message.sender + \" 님이 로그인 하셨습니다.\",\n        status: \"online\",\n        dateTime: message.dateTime\n      });\n      this.setState({\n        roomNotification: this.state.roomNotification,\n        bellRing: true\n      });\n    } else if (message.type === \"LEAVE\") {\n      this.state.roomNotification.map((notification, i) => {\n        if (notification.sender === message.sender + \" 님이 로그인 하셨습니다.\") {\n          notification.status = \"offline\";\n          notification.sender = message.sender + \" 님이 로그아웃 하셨습니다.\";\n          notification.dateTime = message.dateTime;\n        }\n      });\n      this.setState({\n        roomNotification: this.state.roomNotification,\n        bellRing: true\n      });\n    } else if (message.type === \"TYPING\") {\n      this.state.roomNotification.map((notification, i) => {\n        if (notification.sender === message.sender + \" 님이 로그인 하셨습니다.\") {\n          if (message.content) notification.status = \"typing...\";\n          else notification.status = \"online\";\n        }\n      });\n      this.setState({\n        roomNotification: this.state.roomNotification\n      });\n    } else if (message.type === \"CHAT\") {\n      this.state.roomNotification.map((notification, i) => {\n        if (notification.sender === message.sender + \" 님이 로그인 하셨습니다.\") {\n          notification.status = \"online\";\n        }\n      });\n      this.state.broadcastMessage.push({\n        message: message.content,\n        sender: message.sender,\n        dateTime: message.dateTime\n      });\n      this.setState({\n        broadcastMessage: this.state.broadcastMessage\n      });\n    } else {\n      // do nothing...\n    }\n  };\n\n  onError = error => {\n    this.setState({\n      error:\n        \"Could not connect you to the Chat Room Server. Please refresh this page and try again!\"\n    });\n  };\n\n  //스크롤 바 조정\n  scrollToBottom = () => {\n    var object = this.refs.messageBox;\n    if (object) object.scrollTop = object.scrollHeight;\n  };\n\n  componentDidUpdate() {\n    if (this.state.error) {\n      throw new Error(\"Unable to connect to chat room server.\");\n    } else {\n      this.scrollToBottom();\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      curTime: new Date().toLocaleString()\n    });\n\n    this.timerID = setInterval(\n      () =>\n        this.state.bellRing\n          ? this.setState({\n              bellRing: false\n            })\n          : \"\",\n      1000\n    );\n  }\n  render() {\n    return (\n      <div>\n        \n        {/* 접속 되어 있으면 render */}\n        {this.state.channelConnected ? (\n          <div>\n            <Menu\n              roomNotification={this.state.roomNotification}\n              bellRing={this.state.bellRing}\n              openNotifications={this.state.openNotifications}\n              username={this.state.username}\n              broadcastMessage={this.state.broadcastMessage}\n            />\n            {/* 왼쪽 User 목록 출력 창 */}\n            <Paper elevation={5}>\n              <Aside\n                roomNotification={this.state.roomNotification}\n                openNotifications={this.state.openNotifications}\n                username={this.state.username}\n                broadcastMessage={this.state.broadcastMessage}\n              />\n            </Paper>\n\n            {/* Chatting 내용 출력 창 */}\n            <Paper elevation={5}>\n              <ul id=\"chat\" ref=\"messageBox\">\n                {this.state.broadcastMessage.map((msg, i) =>\n                  this.state.username === msg.sender ? (\n                    <li className=\"you\" key={i}>\n                      <div className=\"entity\">\n                        <h2>\n                          <img\n                            src={userImage}\n                            alt=\"Default-User\"\n                            className=\"avatar\"\n                          />\n                          <span> </span>\n                          <span className=\"sender\"> {msg.sender} ~ (You)</span>\n                        </h2>\n                        <span> </span>\n                      </div>\n                      <div className=\"triangle\"></div>\n                      <div className=\"message\">{msg.message}</div>\n                      <div>\n                        <h3>{msg.dateTime}</h3>\n                      </div>\n                    </li>\n                  ) : (\n                    <li className=\"others\">\n                      <div className=\"entity\">\n                        <span> </span>\n                        <img\n                          src={userImage}\n                          alt=\"Default-User\"\n                          className=\"avatar\"\n                        />\n                        <span> </span>\n                        <span className=\"sender\">{msg.sender}</span>\n                      </div>\n                      <div className=\"triangle\"></div>\n                      <div className=\"message\">{msg.message}</div>\n                      <div>\n                        <h3>{msg.dateTime}</h3>\n                      </div>\n                    </li>\n                  )\n                )}\n              </ul>\n\n              <Footer sendMessage={this.sendMessage} privateMessage={false} />\n            </Paper>\n          </div>\n        ) : ( /* 접속중 아니면 로그인창 이동 */\n          <Login connect={this.connect} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default ChatMessageBox;\n"]},"metadata":{},"sourceType":"module"}